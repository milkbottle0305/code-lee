// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  comments     Comment[]
  replies      Reply[]
  commentLikes CommentLike[]
  replyLikes   ReplyLike[]
}

model Problem {
  id          String      @id @default(uuid())
  title       String
  description String
  difficulty  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  techStacks TechStack[]
  commits    Commit[]
}

model TechStack {
  id   String @id @default(uuid())
  name String @unique

  problems Problem[]
}

model Commit {
  id      String   @id @default(uuid())
  message String
  date    DateTime

  problemId String
  problem   Problem @relation(fields: [problemId], references: [id])

  files    CommitFile[]
  comments Comment[]
}

model CommitFile {
  id      String @id @default(uuid())
  path    String
  name    String
  content String
  diff    String

  commitId String
  commit   Commit @relation(fields: [commitId], references: [id])

  comments Comment[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  lineNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  likes      Int      @default(0)
  dislikes   Int      @default(0)

  fileId   String
  file     CommitFile @relation(fields: [fileId], references: [id])
  commitId String
  commit   Commit     @relation(fields: [commitId], references: [id])
  authorId String
  author   User       @relation(fields: [authorId], references: [id])

  replies      Reply[]
  commentLikes CommentLike[]
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Int      @default(0)
  dislikes  Int      @default(0)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  authorId  String
  author    User    @relation(fields: [authorId], references: [id])

  replyLikes ReplyLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model ReplyLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  replyId String
  reply   Reply  @relation(fields: [replyId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@unique([replyId, userId])
}
